// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
insert into refresh_tokens (
  token, user_id
) values (
  $1, $2
) returning token
`

type CreateRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID)
	var token string
	err := row.Scan(&token)
	return token, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
update refresh_tokens
set
  revoked_at = now(),
  updated_at = now()
where token = $1
returning token
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}

const validateRefreshToken = `-- name: ValidateRefreshToken :one
select (revoked_at is null and now() < expires_at) as valid, user_id
from refresh_tokens where token = $1 limit 1
`

type ValidateRefreshTokenRow struct {
	Valid  sql.NullBool
	UserID uuid.UUID
}

func (q *Queries) ValidateRefreshToken(ctx context.Context, token string) (ValidateRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, validateRefreshToken, token)
	var i ValidateRefreshTokenRow
	err := row.Scan(&i.Valid, &i.UserID)
	return i, err
}
